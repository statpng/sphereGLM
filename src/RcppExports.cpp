// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// Cq_cpp
double Cq_cpp(arma::vec theta, bool logarithm);
RcppExport SEXP _sphereGLM_Cq_cpp(SEXP thetaSEXP, SEXP logarithmSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< bool >::type logarithm(logarithmSEXP);
    rcpp_result_gen = Rcpp::wrap(Cq_cpp(theta, logarithm));
    return rcpp_result_gen;
END_RCPP
}
// Bq_cpp
double Bq_cpp(arma::vec theta);
RcppExport SEXP _sphereGLM_Bq_cpp(SEXP thetaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type theta(thetaSEXP);
    rcpp_result_gen = Rcpp::wrap(Bq_cpp(theta));
    return rcpp_result_gen;
END_RCPP
}
// Hq_cpp
double Hq_cpp(arma::vec theta);
RcppExport SEXP _sphereGLM_Hq_cpp(SEXP thetaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type theta(thetaSEXP);
    rcpp_result_gen = Rcpp::wrap(Hq_cpp(theta));
    return rcpp_result_gen;
END_RCPP
}
// subgrad
arma::vec subgrad(arma::vec theta);
RcppExport SEXP _sphereGLM_subgrad(SEXP thetaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type theta(thetaSEXP);
    rcpp_result_gen = Rcpp::wrap(subgrad(theta));
    return rcpp_result_gen;
END_RCPP
}
// b1_vMF
arma::vec b1_vMF(arma::vec theta);
RcppExport SEXP _sphereGLM_b1_vMF(SEXP thetaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type theta(thetaSEXP);
    rcpp_result_gen = Rcpp::wrap(b1_vMF(theta));
    return rcpp_result_gen;
END_RCPP
}
// b2_vMF
arma::mat b2_vMF(arma::vec theta);
RcppExport SEXP _sphereGLM_b2_vMF(SEXP thetaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type theta(thetaSEXP);
    rcpp_result_gen = Rcpp::wrap(b2_vMF(theta));
    return rcpp_result_gen;
END_RCPP
}
// diag_matrix
arma::mat diag_matrix(const arma::mat& X, double lambda);
RcppExport SEXP _sphereGLM_diag_matrix(SEXP XSEXP, SEXP lambdaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    rcpp_result_gen = Rcpp::wrap(diag_matrix(X, lambda));
    return rcpp_result_gen;
END_RCPP
}
// calculate_b1_vMF
arma::mat calculate_b1_vMF(const arma::mat& Offset, const Rcpp::List& Xt_list, const arma::vec& beta, int n);
RcppExport SEXP _sphereGLM_calculate_b1_vMF(SEXP OffsetSEXP, SEXP Xt_listSEXP, SEXP betaSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type Offset(OffsetSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type Xt_list(Xt_listSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(calculate_b1_vMF(Offset, Xt_list, beta, n));
    return rcpp_result_gen;
END_RCPP
}
// calculate_b2_vMF
arma::mat calculate_b2_vMF(const arma::mat& Offset, const Rcpp::List& Xt_list, const arma::vec& beta, int n);
RcppExport SEXP _sphereGLM_calculate_b2_vMF(SEXP OffsetSEXP, SEXP Xt_listSEXP, SEXP betaSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type Offset(OffsetSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type Xt_list(Xt_listSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(calculate_b2_vMF(Offset, Xt_list, beta, n));
    return rcpp_result_gen;
END_RCPP
}
// sphereGLM_iteration
List sphereGLM_iteration(arma::mat X, arma::mat Y, arma::mat Offset, arma::vec beta, arma::mat Xt, List Xt_list, double eps, int maxit, double lambda, bool orthogonal, double gamma, Rcpp::Nullable<Rcpp::IntegerVector> zero_beta);
RcppExport SEXP _sphereGLM_sphereGLM_iteration(SEXP XSEXP, SEXP YSEXP, SEXP OffsetSEXP, SEXP betaSEXP, SEXP XtSEXP, SEXP Xt_listSEXP, SEXP epsSEXP, SEXP maxitSEXP, SEXP lambdaSEXP, SEXP orthogonalSEXP, SEXP gammaSEXP, SEXP zero_betaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Y(YSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Offset(OffsetSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Xt(XtSEXP);
    Rcpp::traits::input_parameter< List >::type Xt_list(Xt_listSEXP);
    Rcpp::traits::input_parameter< double >::type eps(epsSEXP);
    Rcpp::traits::input_parameter< int >::type maxit(maxitSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< bool >::type orthogonal(orthogonalSEXP);
    Rcpp::traits::input_parameter< double >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<Rcpp::IntegerVector> >::type zero_beta(zero_betaSEXP);
    rcpp_result_gen = Rcpp::wrap(sphereGLM_iteration(X, Y, Offset, beta, Xt, Xt_list, eps, maxit, lambda, orthogonal, gamma, zero_beta));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_sphereGLM_Cq_cpp", (DL_FUNC) &_sphereGLM_Cq_cpp, 2},
    {"_sphereGLM_Bq_cpp", (DL_FUNC) &_sphereGLM_Bq_cpp, 1},
    {"_sphereGLM_Hq_cpp", (DL_FUNC) &_sphereGLM_Hq_cpp, 1},
    {"_sphereGLM_subgrad", (DL_FUNC) &_sphereGLM_subgrad, 1},
    {"_sphereGLM_b1_vMF", (DL_FUNC) &_sphereGLM_b1_vMF, 1},
    {"_sphereGLM_b2_vMF", (DL_FUNC) &_sphereGLM_b2_vMF, 1},
    {"_sphereGLM_diag_matrix", (DL_FUNC) &_sphereGLM_diag_matrix, 2},
    {"_sphereGLM_calculate_b1_vMF", (DL_FUNC) &_sphereGLM_calculate_b1_vMF, 4},
    {"_sphereGLM_calculate_b2_vMF", (DL_FUNC) &_sphereGLM_calculate_b2_vMF, 4},
    {"_sphereGLM_sphereGLM_iteration", (DL_FUNC) &_sphereGLM_sphereGLM_iteration, 12},
    {NULL, NULL, 0}
};

RcppExport void R_init_sphereGLM(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
